{"version":3,"file":"index-jeR3H6yP.js","sources":["../../packages/signal/index.ts"],"sourcesContent":["/**\n * Options for configuring a signal.\n * \n * @typedef {Object} SignalOptions\n * @property {string} name - The name of the signal.\n * @property {boolean} [useSuffix] - Whether to emit the event as `signal-[name]` (true) or just `signal` (false). The name is always included in the event detail.\n * @property {boolean} [bubbles] - Whether the signal bubbles up through the DOM.\n * @property {boolean} [cancelable] - Whether the signal emit event can be canceled.\n */\nexport type SignalOptions = {\n    name?: string;\n    useSuffix?: boolean;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    target?: EventTarget;\n};\ntype ProxyValue<T> = (string extends keyof T ? T[keyof T & string] : any) | (symbol extends keyof T ? T[keyof T & symbol] : any);\ntype EmitArgs<T> = { action: \"set\", prop: string | symbol, oldValue: any, value: any }\n    | { action: \"defineProperty\", prop: string | symbol, attributes: PropertyDescriptor }\n    | { action: \"delete\", prop: string | symbol, oldValue: ProxyValue<T> }\n    | { action: \"setPrototypeOf\", prototype: object | null }\n    | { action: \"data\" };\n\n\n/**\n * A class that extends `EventTarget` and implements `ProxyHandler` to provide reactive data binding and event dispatching.\n * \n * @template T - The type of the data object being proxied. Defaults to `object`.\n * \n * @extends EventTarget\n * @implements ProxyHandler<T>\n * \n * @property {T} data - The data object being proxied.\n * @property {SignalOptions | undefined} options - Optional configuration for the signal.\n * \n * @example\n * ```typescript\n *\n * const signal = new Signal({});\n * \n * signal.addEventListener(\"signal\", (event) => {\n *   console.log(event.detail);\n * });\n * \n * signal.foo = \"bar\"; // Triggers the event\n * ```\n */\nexport default class Signal<T extends Object = object> extends EventTarget implements ProxyHandler<T> {\n    [x: string | number | symbol]: any; //allows for any key to be dynamically defined\n    private data: T;\n    private options: SignalOptions | undefined;\n\n    constructor(data: T, options?: SignalOptions) {\n        super();\n        this.data = data ?? {};\n        this.options = options;\n        return new Proxy(this.data, this) as unknown as T & Signal<T>;\n    }\n\n    /**\n     * Emits a custom event with the specified arguments.\n     *\n     * @template T - The type of the event data.\n     * @param {EmitArgs<T>} args - The arguments to include in the event detail.\n     * @returns {boolean} - Returns `true` if the event was successfully dispatched and not canceled, otherwise `false`.\n     *\n     */\n    private emit(args: EmitArgs<T>): boolean {\n        const timestamp = Date.now();\n        const { bubbles = true, cancelable = true, name = \"\", useSuffix = false } = this.options ?? {};\n        const eventName = `signal${(useSuffix && name?.length) ? `-${name}` : ''}`;\n        const detail = { ...args, name, timestamp, data: this.data };\n        const event = new CustomEvent(eventName, { bubbles, cancelable, detail });\n        const tgt = this.options?.target;\n        const tgtCanContinue = (tgt && tgt[\"dispatchEvent\"]) ? tgt?.dispatchEvent(event) : false;\n        let superResult: boolean | undefined = undefined;\n        if (tgtCanContinue) {\n            superResult = super.dispatchEvent(event);\n        }\n        return tgtCanContinue ? (superResult ?? true) : false;\n    }\n\n    /**\n     * Intercepts property access on the target object.\n     *\n     * @template T - The type of the target object.\n     * @param {T} _target - The target object.\n     * @param {string | symbol} property - The name or symbol of the property being accessed.\n     * @param {any} receiver - The proxy or an object that inherits from the proxy.\n     * @returns {ProxyValue<T>} - The value of the property being accessed.\n     */\n    get(_target: T, property: string | symbol, receiver: any): ProxyValue<T> {\n        if (property === \"addEventListener\" || property === \"removeEventListener\") {\n            return Reflect.get(EventTarget.prototype, property, this).bind(this);\n        } else { }\n        return Reflect.get(this.data, property, receiver);\n    }\n\n    /**\n     * Sets the value of a property on the target object.\n     *\n     * @param _target - The target object on which to set the property.\n     * @param prop - The name or symbol of the property to set.\n     * @param value - The new value for the property.\n     * @param receiver - The proxy or object that initially received the request.\n     * @returns A boolean indicating whether the property was successfully set.\n     *\n     * @remarks\n     * If the property is successfully set, an event is emitted with the action \"set\",\n     * the property name, the old value, and the new value.\n     */\n    set(_target: T, prop: string | symbol, value: any, receiver: any): boolean {\n        const oldValue = Reflect.get(this.data, prop, receiver);\n        const isSuccessful = Reflect.set(this.data, prop, value, receiver);\n        if (isSuccessful) {\n            this.emit({ action: \"set\", prop, oldValue, value });\n        }\n        return isSuccessful;\n    }\n\n    /**\n     * Deletes a property from the target object.\n     *\n     * @param _target - The target object from which the property will be deleted.\n     * @param prop - The name or symbol of the property to delete.\n     * @returns A boolean indicating whether the property was successfully deleted.\n     *\n     * @template T - The type of the target object.\n     * @remarks\n     * If the property is successfully deleted, an event is emitted with the action \"deleteProperty\",\n     * the property name, and the old value.\n     */\n    deleteProperty(_target: T, prop: string | symbol): boolean {\n        const oldValue = Reflect.get(this.data, prop);\n        const result = Reflect.deleteProperty(this.data, prop);\n        if (result) {\n            this.emit({ action: \"delete\", prop, oldValue });\n        }\n        return result;\n    }\n\n    /**\n     * Defines a new property directly on an object, or modifies an existing property on an object, and returns a boolean indicating whether the operation was successful.\n     *\n     * @param _target - The target object on which to define the property.\n     * @param prop - The name or Symbol of the property to be defined or modified.\n     * @param attributes - The descriptor for the property being defined or modified.\n     * @returns A boolean indicating whether the property was successfully defined.\n     * @remarks\n     * If the property is successfully defined, an event is emitted with the action \"defineProperty\",\n     * the property name, and the value attributes.\n     */\n    defineProperty(_target: T, prop: string | symbol, attributes: PropertyDescriptor): boolean {\n        const isSuccessful = Reflect.defineProperty(this.data, prop, attributes);\n        if (isSuccessful) {\n            this.emit({ action: \"defineProperty\", prop, attributes });\n        }\n        return isSuccessful;\n    }\n\n    /**\n     * Sets the prototype of the target object to the specified prototype.\n     *\n     * @param _target - The target object whose prototype is to be set.\n     * @param prototype - The new prototype object or null.\n     * @returns A boolean indicating whether the prototype was successfully set.\n     *\n     * @emits {Object} - Emits an event with the action \"setPrototypeOf\" and the new prototype.\n     * @remarks\n     * If the prototype is successfully set, an event is emitted with the action \"setPrototypeOf\" and the new prototype.\n     */\n    setPrototypeOf(_target: T, prototype: object | null): boolean {\n        const isSuccessful = Reflect.setPrototypeOf(this.data, prototype);\n        if (isSuccessful) {\n            this.emit({ action: \"setPrototypeOf\", prototype });\n        }\n        return isSuccessful;\n    }\n}"],"names":["Signal","data","options","args","_a","timestamp","bubbles","cancelable","name","useSuffix","eventName","detail","event","tgt","tgtCanContinue","superResult","_target","property","receiver","prop","value","oldValue","isSuccessful","result","attributes","prototype"],"mappings":"AA+CA,MAAqBA,UAA0C,WAAuC,CAKlG,YAAYC,EAASC,EAAyB,CAC1C,aAAA,EACA,KAAK,KAAOD,GAAQ,CAAA,EACpB,KAAK,QAAUC,EACR,IAAI,MAAM,KAAK,KAAM,IAAI,CACpC,CAUQ,KAAKC,EAA4B,CApB7C,IAAAC,EAqBQ,MAAMC,EAAY,KAAK,IAAA,EACjB,CAAE,QAAAC,EAAU,GAAM,WAAAC,EAAa,GAAM,KAAAC,EAAO,GAAI,UAAAC,EAAY,EAAA,EAAU,KAAK,SAAW,CAAA,EACtFC,EAAY,SAAUD,IAAaD,GAAA,MAAAA,EAAM,QAAU,IAAIA,CAAI,GAAK,EAAE,GAClEG,EAAS,CAAE,GAAGR,EAAM,KAAAK,EAAM,UAAAH,EAAW,KAAM,KAAK,IAAA,EAChDO,EAAQ,IAAI,YAAYF,EAAW,CAAE,QAAAJ,EAAS,WAAAC,EAAY,OAAAI,EAAQ,EAClEE,GAAMT,EAAA,KAAK,UAAL,YAAAA,EAAc,OACpBU,EAAkBD,GAAOA,EAAI,cAAoBA,GAAA,YAAAA,EAAK,cAAcD,GAAS,GACnF,IAAIG,EACJ,OAAID,IACAC,EAAc,MAAM,cAAcH,CAAK,GAEpCE,EAAkBC,GAAe,GAAQ,EACpD,CAWA,IAAIC,EAAYC,EAA2BC,EAA8B,CACrE,OAAID,IAAa,oBAAsBA,IAAa,sBACzC,QAAQ,IAAI,YAAY,UAAWA,EAAU,IAAI,EAAE,KAAK,IAAI,EAEhE,QAAQ,IAAI,KAAK,KAAMA,EAAUC,CAAQ,CACpD,CAeA,IAAIF,EAAYG,EAAuBC,EAAYF,EAAwB,CACvE,MAAMG,EAAW,QAAQ,IAAI,KAAK,KAAMF,EAAMD,CAAQ,EAChDI,EAAe,QAAQ,IAAI,KAAK,KAAMH,EAAMC,EAAOF,CAAQ,EACjE,OAAII,GACA,KAAK,KAAK,CAAE,OAAQ,MAAO,KAAAH,EAAM,SAAAE,EAAU,MAAAD,EAAO,EAE/CE,CACX,CAcA,eAAeN,EAAYG,EAAgC,CACvD,MAAME,EAAW,QAAQ,IAAI,KAAK,KAAMF,CAAI,EACtCI,EAAS,QAAQ,eAAe,KAAK,KAAMJ,CAAI,EACrD,OAAII,GACA,KAAK,KAAK,CAAE,OAAQ,SAAU,KAAAJ,EAAM,SAAAE,EAAU,EAE3CE,CACX,CAaA,eAAeP,EAAYG,EAAuBK,EAAyC,CACvF,MAAMF,EAAe,QAAQ,eAAe,KAAK,KAAMH,EAAMK,CAAU,EACvE,OAAIF,GACA,KAAK,KAAK,CAAE,OAAQ,iBAAkB,KAAAH,EAAM,WAAAK,EAAY,EAErDF,CACX,CAaA,eAAeN,EAAYS,EAAmC,CAC1D,MAAMH,EAAe,QAAQ,eAAe,KAAK,KAAMG,CAAS,EAChE,OAAIH,GACA,KAAK,KAAK,CAAE,OAAQ,iBAAkB,UAAAG,EAAW,EAE9CH,CACX,CACJ"}