{"version":3,"file":"index-elxubOyO.js","sources":["../../packages/middle-truncate/index.ts"],"sourcesContent":["type SegmentDataWithLength = Intl.SegmentData & {\r\n  length: number;\r\n};\r\n\r\nclass DimensionProxy {\r\n  #elLen: number;\r\n  #dividerLen: number;\r\n  #maxTextLen: number;\r\n  #onChange: (object: DimensionProxy) => void;\r\n  constructor(\r\n    onChange: (object: DimensionProxy) => void,\r\n    initialValue?: object\r\n  ) {\r\n    const {\r\n      elLen = 0,\r\n      dividerLen = 0,\r\n      maxTextLen = 0,\r\n    } = (initialValue as DimensionProxy) ?? {};\r\n    this.#elLen = elLen;\r\n    this.#dividerLen = dividerLen;\r\n    this.#maxTextLen = maxTextLen;\r\n    this.#onChange = onChange;\r\n  }\r\n  get elLen(): number {\r\n    return this.#elLen;\r\n  }\r\n  set elLen(val: number) {\r\n    if (val !== this.#elLen) {\r\n      this.#elLen = val;\r\n      this.#onChange(this);\r\n    }\r\n  }\r\n  get dividerLen() {\r\n    return this.#dividerLen;\r\n  }\r\n  set dividerLen(val) {\r\n    if (val !== this.#dividerLen) {\r\n      this.#dividerLen = val;\r\n      this.#onChange(this);\r\n    }\r\n  }\r\n  get maxTextLen() {\r\n    return this.#maxTextLen;\r\n  }\r\n  set maxTextLen(val) {\r\n    if (val !== this.#maxTextLen) {\r\n      this.#maxTextLen = val;\r\n      this.#onChange(this);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A custom HTML element that truncates text in the middle to fit within a specified limit.\r\n * @module middle-truncate\r\n * @class MiddleTruncate\r\n * @extends HTMLElement\r\n *\r\n * @attribute {string} value - The text content to be truncated.\r\n * @attribute {number} limit - The maximum number of characters to display.\r\n * @attribute {string} dir - The text direction, either 'ltr' (left-to-right) or 'rtl' (right-to-left).\r\n *\r\n */\r\nclass MiddleTruncate extends HTMLElement {\r\n  #segmenter: Intl.Segmenter;\r\n  #segments: SegmentDataWithLength[] = [];\r\n  #dimensionUpdateLockId: ReturnType<typeof requestIdleCallback> | undefined;\r\n  #redrawLock: ReturnType<typeof requestAnimationFrame> | undefined;\r\n  #defaultDivider: string = 'â€¦';\r\n  #windowFocused = true;\r\n  #resizeObserver: ResizeObserver | undefined;\r\n  #dimensions: DimensionProxy;\r\n  #internals: ElementInternals;\r\n\r\n  static get observedAttributes() {\r\n    return ['title', 'at', 'divider', 'disabled', 'ms', 'truncated'];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    window.addEventListener('resize', () => {\r\n      this.#render();\r\n    });\r\n    window.addEventListener('focus', () => {\r\n      this.#windowFocused = true;\r\n      this.#render();\r\n    });\r\n    window.addEventListener('blur', () => {\r\n      this.#windowFocused = false;\r\n      this.#cancelNextRender();\r\n    });\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.hidden) {\r\n        this.#cancelNextRender();\r\n      } else {\r\n        this.#render();\r\n      }\r\n    });\r\n    this.#dimensions = new DimensionProxy((_dimProxy) => {\r\n      this.#redraw();\r\n    });\r\n\r\n    // Attach an ElementInternals to get states property\r\n    this.#internals = this.attachInternals();\r\n  }\r\n\r\n  get #canUpdate() {\r\n    if (!this || !this.#windowFocused || !this.isConnected || document.hidden)\r\n      return false;\r\n    const rect = this.getBoundingClientRect();\r\n    //this isVisible check has a pixel buffer around the screen size\r\n    const bufferPx = 10;\r\n    const isVisible =\r\n      rect.top >= -bufferPx &&\r\n      rect.bottom <= window.innerHeight + bufferPx &&\r\n      rect.left >= -bufferPx &&\r\n      rect.right <= window.innerWidth + bufferPx;\r\n    return isVisible;\r\n  }\r\n\r\n  #cancelNextRender() {\r\n    if (this.#dimensionUpdateLockId) {\r\n      cancelIdleCallback(this.#dimensionUpdateLockId);\r\n      this.#dimensionUpdateLockId = undefined;\r\n    }\r\n    if (this.#redrawLock) {\r\n      cancelAnimationFrame(this.#redrawLock);\r\n      this.#redrawLock = undefined;\r\n    }\r\n  }\r\n\r\n  connectedCallback() {\r\n    if (!this.#resizeObserver) {\r\n      this.#resizeObserver = new ResizeObserver((entries) => {\r\n        const { contentBoxSize } = entries[0];\r\n        const { inlineSize } = contentBoxSize[0];\r\n        if (inlineSize) {\r\n          this.#dimensions.elLen = inlineSize;\r\n        }\r\n      });\r\n    }\r\n    this.#resizeObserver.observe(this);\r\n    this.#render();\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n    }\r\n    this.#cancelNextRender();\r\n  }\r\n\r\n  attributeChangedCallback(attrName, oldVal, newVal) {\r\n    if (attrName === 'title') {\r\n      if (!this.#segmenter) {\r\n        this.#segmenter = new Intl.Segmenter();\r\n      }\r\n      if (!newVal) {\r\n        this.#segments = [];\r\n      } else {\r\n        Array.from(this.#segmenter.segment(newVal)).forEach((segData, idx) => {\r\n          this.#segments[idx] = {\r\n            ...segData,\r\n            input: '', //the input is stored in this.title. No need to keep it duplicated it in memory here\r\n            length: this.#segments[idx]?.length ?? 0,\r\n          };\r\n        });\r\n      }\r\n    }\r\n    // 'truncated' is read-only and should always match the internal value\r\n    if (attrName === 'truncated') {\r\n      this.#setTruncated(this.truncated);\r\n    }\r\n    this.#cancelNextRender();\r\n    this.#render();\r\n  }\r\n\r\n  /**\r\n   * The percentage of text to show the truncation at.\r\n   */\r\n  get at(): number {\r\n    const fallback = 50;\r\n    if (this.hasAttribute('at')) {\r\n      try {\r\n        return parseInt(String(this.getAttribute('at')));\r\n      } catch (e) {\r\n        return fallback;\r\n      }\r\n    }\r\n    return fallback;\r\n  }\r\n\r\n  /**\r\n   * The percentage of text to show the truncation at.\r\n   */\r\n  set at(val: string | number | undefined | null) {\r\n    if (val === undefined || val === null) {\r\n      this.removeAttribute('at');\r\n    } else {\r\n      const asNum = Math.max(0, Math.min(100, parseInt(String(val))));\r\n      if (asNum) {\r\n        this.setAttribute('at', String(asNum));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The maximum number of milliseconds to wait before recalculating dimensions\r\n   */\r\n  get ms(): number {\r\n    const fallback = 16; //at 60fps 16ms is roughly 1 frame\r\n    if (this.hasAttribute('at')) {\r\n      try {\r\n        return parseInt(String(this.getAttribute('at')));\r\n      } catch (e) {\r\n        return fallback;\r\n      }\r\n    }\r\n    return fallback;\r\n  }\r\n\r\n  /**\r\n   * The maximum number of milliseconds to wait before recalculating dimensions\r\n   */\r\n  set ms(val: string | number | undefined | null) {\r\n    if (!val) {\r\n      this.removeAttribute('ms');\r\n    } else {\r\n      const asNum = Math.max(0, parseInt(String(val)));\r\n      if (asNum) {\r\n        this.setAttribute('ms', String(asNum));\r\n      }\r\n    }\r\n  }\r\n\r\n  get divider() {\r\n    return this.getAttribute('divider') ?? this.#defaultDivider;\r\n  }\r\n\r\n  set divider(val) {\r\n    if (!val?.length) {\r\n      this.removeAttribute('divider');\r\n    } else {\r\n      this.setAttribute('divider', val);\r\n    }\r\n  }\r\n\r\n  get truncated() {\r\n    return this.#internals.states.has('truncated');\r\n  }\r\n\r\n  #setTruncated(isTruncated: boolean) {\r\n    const hasInternal = this.#internals.states.has('truncated');\r\n    const hasAttr = this.hasAttribute('truncated');\r\n    if (isTruncated) {\r\n      if (!hasInternal) {\r\n        this.#internals.states.add('truncated');\r\n      }\r\n      if (!hasAttr) {\r\n        this.setAttribute('truncated', '');\r\n      }\r\n    } else {\r\n      if (hasInternal) {\r\n        this.#internals.states.delete('truncated');\r\n      }\r\n      if (hasAttr) {\r\n        this.removeAttribute('truncated');\r\n      }\r\n    }\r\n  }\r\n\r\n  #redraw() {\r\n    //this is the latest update, it's the only one that should be applied.\r\n    if (this.#redrawLock) {\r\n      cancelAnimationFrame(this.#redrawLock);\r\n      this.#redrawLock = undefined;\r\n    }\r\n    const updateInnerText = (newText: string): boolean => {\r\n      if (this.innerText !== newText) {\r\n        this.innerText = newText ?? '';\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n    const redraw = () => {\r\n      if (this && (!this.isConnected || this.hasAttribute('disabled'))) {\r\n        updateInnerText(this.title);\r\n      } else {\r\n        //there's no point rendering elements that aren't seen, so only continue while the element is in view\r\n        if (!this.#canUpdate) return;\r\n        const noTitle = !this.title || !this.#segments?.length;\r\n        this.#setTruncated(\r\n          noTitle ? false : this.#dimensions.elLen < this.#dimensions.maxTextLen\r\n        );\r\n        const useFullText =\r\n          noTitle || !this.#dimensions.elLen || !this.truncated;\r\n        if (useFullText) {\r\n          updateInnerText(this.title);\r\n        } else if (this.#dimensions.elLen <= this.#dimensions.dividerLen) {\r\n          updateInnerText(this.divider);\r\n        } else {\r\n          const availableSpace = Math.floor(\r\n            this.#dimensions.elLen - this.#dimensions.dividerLen\r\n          );\r\n          const startMaxPx = Math.floor(availableSpace * (this.at / 100));\r\n          const endMaxPx = Math.floor(availableSpace - startMaxPx);\r\n          const startIdx = this.#segments.filter(\r\n            ({ length: segLen }, idx, arr) => {\r\n              const sumLen = Math.ceil(\r\n                arr\r\n                  .slice(0, idx)\r\n                  .reduce((prev, curr) => prev + curr.length, 0) + segLen\r\n              );\r\n              return sumLen < startMaxPx;\r\n            }\r\n          ).length;\r\n          const endIdx = this.#segments.filter(\r\n            ({ length: segLen }, idx, arr) => {\r\n              const sumLen = Math.ceil(\r\n                arr.slice(-idx).reduce((prev, curr) => prev + curr.length, 0) +\r\n                  segLen\r\n              );\r\n              return sumLen > endMaxPx;\r\n            }\r\n          ).length;\r\n          const startStr = this.title.slice(0, startIdx);\r\n          const endStr = this.title.slice(endIdx);\r\n          console.log(`truncated`, {\r\n            startIdx,\r\n            endIdx,\r\n            startStr,\r\n            dims: this.#dimensions,\r\n            endStr,\r\n            availableSpace,\r\n            startMaxPx,\r\n            endMaxPx,\r\n          });\r\n          updateInnerText(`${startStr}${this.divider}${endStr}`);\r\n        }\r\n      }\r\n    };\r\n    redraw();\r\n    this.#redrawLock = requestAnimationFrame(redraw);\r\n  }\r\n\r\n  #render() {\r\n    if (!this) return;\r\n    //there's an update pending, let it finish\r\n    if (this.#dimensionUpdateLockId) return;\r\n    const updateDimensions = () => {\r\n      const currentText = this.innerText;\r\n      const { writingMode } = getComputedStyle(this);\r\n      const isVertical = writingMode.startsWith('vertical');\r\n      const isSideways = writingMode.startsWith('sideways');\r\n      const useHeight = isVertical || isSideways;\r\n\r\n      const getDim = () => {\r\n        const { width, height } = this.getBoundingClientRect();\r\n        return useHeight ? height : width;\r\n      };\r\n\r\n      this.#defaultDivider = isVertical ? 'ï¸™' : 'â€¦'; //unicode FE19 and 2026\r\n      this.innerText = this.divider;\r\n      // const { width: dividerWidth, height: dividerHeight } = this.getBoundingClientRect();\r\n      this.#dimensions.dividerLen = Math.ceil(getDim());\r\n\r\n      //determine the dimensions of the text by summing the length and width of each rendered segment\r\n      let fullTextLen = 0;\r\n      this.#segments.forEach((segData, idx) => {\r\n        this.innerText = segData.segment;\r\n        const dim = Math.ceil(getDim());\r\n        fullTextLen += dim;\r\n        this.#segments[idx].length = dim;\r\n      });\r\n      this.#dimensions.maxTextLen = fullTextLen;\r\n\r\n      this.innerText = this.title;\r\n      //determine the correct element dimensions to use for the next render\r\n      this.#dimensions.elLen = Math.floor(getDim());\r\n\r\n      //then restore the correct text\r\n      this.innerText = currentText;\r\n      // and remove the lock on updating dimensions\r\n      this.#dimensionUpdateLockId = undefined;\r\n    };\r\n    this.#dimensionUpdateLockId = requestIdleCallback(updateDimensions, {\r\n      timeout: this.ms,\r\n    });\r\n  }\r\n}\r\n\r\ncustomElements.define('middle-truncate', MiddleTruncate);\r\n"],"names":["_elLen","_dividerLen","_maxTextLen","_onChange","DimensionProxy","onChange","initialValue","__privateAdd","elLen","dividerLen","maxTextLen","__privateSet","__privateGet","val","_segmenter","_segments","_dimensionUpdateLockId","_redrawLock","_defaultDivider","_windowFocused","_resizeObserver","_dimensions","_internals","_MiddleTruncate_instances","canUpdate_get","cancelNextRender_fn","setTruncated_fn","redraw_fn","render_fn","MiddleTruncate","__privateMethod","_dimProxy","entries","contentBoxSize","inlineSize","attrName","oldVal","newVal","segData","idx","_a","asNum","rect","bufferPx","isTruncated","hasInternal","hasAttr","updateInnerText","newText","redraw","noTitle","availableSpace","startMaxPx","endMaxPx","startIdx","segLen","arr","prev","curr","endIdx","startStr","endStr","updateDimensions","currentText","writingMode","isVertical","isSideways","useHeight","getDim","width","height","fullTextLen","dim"],"mappings":"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"}