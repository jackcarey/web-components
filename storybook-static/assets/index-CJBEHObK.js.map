{"version":3,"file":"index-CJBEHObK.js","sources":["../../packages/middle-truncate/index.ts"],"sourcesContent":["type SegmentDataWithLength = Intl.SegmentData & {\r\n    length: number;\r\n};\r\n\r\nclass DimensionProxy {\r\n    #elLen: number;\r\n    #dividerLen: number;\r\n    #maxTextLen: number;\r\n    #onChange: (object: DimensionProxy) => void;\r\n    constructor(onChange: (object: DimensionProxy) => void, initialValue?: object) {\r\n        const { elLen = 0, dividerLen = 0, maxTextLen = 0 } = (initialValue as DimensionProxy) ?? {};\r\n        this.#elLen = elLen;\r\n        this.#dividerLen = dividerLen;\r\n        this.#maxTextLen = maxTextLen;\r\n        this.#onChange = onChange;\r\n    }\r\n    get elLen(): number {\r\n        return this.#elLen;\r\n    };\r\n    set elLen(val: number) {\r\n        if (val !== this.#elLen) {\r\n            this.#elLen = val;\r\n            this.#onChange(this);\r\n        }\r\n    }\r\n    get dividerLen() {\r\n        return this.#dividerLen;\r\n    }\r\n    set dividerLen(val) {\r\n        if (val !== this.#dividerLen) {\r\n            this.#dividerLen = val;\r\n            this.#onChange(this);\r\n        }\r\n    }\r\n    get maxTextLen() {\r\n        return this.#maxTextLen;\r\n    }\r\n    set maxTextLen(val) {\r\n        if (val !== this.#maxTextLen) {\r\n            this.#maxTextLen = val;\r\n            this.#onChange(this);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * A custom HTML element that truncates text in the middle to fit within a specified limit.\r\n * @module middle-truncate\r\n * @class MiddleTruncate\r\n * @extends HTMLElement\r\n * \r\n * @attribute {string} value - The text content to be truncated.\r\n * @attribute {number} limit - The maximum number of characters to display.\r\n * @attribute {string} dir - The text direction, either 'ltr' (left-to-right) or 'rtl' (right-to-left).\r\n * \r\n */\r\nclass MiddleTruncate extends HTMLElement {\r\n    #segmenter: Intl.Segmenter;\r\n    #segments: SegmentDataWithLength[] = [];\r\n    #dimensionUpdateLockId: ReturnType<typeof requestIdleCallback> | undefined;\r\n    #redrawLock: ReturnType<typeof requestAnimationFrame> | undefined;\r\n    #isTruncated = false;\r\n    #defaultDivider: string = 'â€¦';\r\n    #windowFocused = true;\r\n    #resizeObserver: ResizeObserver | undefined;\r\n    #dimensions: DimensionProxy;\r\n\r\n    static get observedAttributes() {\r\n        return ['title', 'at', 'divider', 'disabled', 'ms', 'truncated'];\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        window.addEventListener(\"resize\", () => {\r\n            this.#render();\r\n        });\r\n        window.addEventListener(\"focus\", () => {\r\n            this.#windowFocused = true;\r\n            this.#render();\r\n        });\r\n        window.addEventListener(\"blur\", () => {\r\n            this.#windowFocused = false;\r\n            this.#cancelNextRender();\r\n        });\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (document.hidden) {\r\n                this.#cancelNextRender();\r\n            } else {\r\n                this.#render();\r\n            }\r\n        });\r\n        this.#dimensions = new DimensionProxy((_dimProxy) => {\r\n            this.#redraw();\r\n        });\r\n    }\r\n\r\n    get #canUpdate() {\r\n        if (!this || !this.#windowFocused || !this.isConnected || document.hidden) return false;\r\n        const rect = this.getBoundingClientRect();\r\n        //this isVisible check has a pixel buffer around the screen size\r\n        const bufferPx = 10;\r\n        const isVisible = rect.top >= -bufferPx && rect.bottom <= window.innerHeight + bufferPx && rect.left >= -bufferPx && rect.right <= window.innerWidth + bufferPx;\r\n        return isVisible;\r\n    }\r\n\r\n    #cancelNextRender() {\r\n        if (this.#dimensionUpdateLockId) {\r\n            cancelIdleCallback(this.#dimensionUpdateLockId);\r\n            this.#dimensionUpdateLockId = undefined;\r\n        }\r\n        if (this.#redrawLock) {\r\n            cancelAnimationFrame(this.#redrawLock);\r\n            this.#redrawLock = undefined;\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        if (!this.#resizeObserver) {\r\n            this.#resizeObserver = new ResizeObserver((entries) => {\r\n                const { contentBoxSize } = entries[0];\r\n                const { inlineSize } = contentBoxSize[0];\r\n                if (inlineSize) {\r\n                    this.#dimensions.elLen = inlineSize;\r\n                }\r\n            });\r\n        }\r\n        this.#resizeObserver.observe(this);\r\n        this.#render();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.#cancelNextRender();\r\n        if (this.#resizeObserver) {\r\n            this.#resizeObserver.disconnect();\r\n        }\r\n    }\r\n\r\n    attributeChangedCallback(attrName, _oldVal, newVal) {\r\n        if (attrName === 'title') {\r\n            if (!this.#segmenter) {\r\n                this.#segmenter = new Intl.Segmenter();\r\n            }\r\n            if (!newVal) {\r\n                this.#segments = [];\r\n            } else {\r\n                Array.from(this.#segmenter.segment(newVal)).forEach((segData, idx) => {\r\n                    this.#segments[idx] = {\r\n                        ...segData,\r\n                        input: '', //the input is stored in this.title. No need to duplicate it in memory here\r\n                        length: this.#segments[idx]?.length ?? 0\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        // 'truncated' is read-only and should always match the internal value\r\n        if (attrName === 'truncated') {\r\n            this.#setTruncated(this.#isTruncated);\r\n        }\r\n        this.#render();\r\n    }\r\n\r\n    /**\r\n     * The percentage of text to show the truncation at.\r\n     */\r\n    get at(): number {\r\n        const fallback = 50;\r\n        if (this.hasAttribute('at')) {\r\n            try {\r\n                return parseInt(String(this.getAttribute('at')));\r\n            } catch (e) {\r\n                return fallback;\r\n            }\r\n        }\r\n        return fallback;\r\n    }\r\n\r\n    /**\r\n     * The percentage of text to show the truncation at.\r\n     */\r\n    set at(val: string | number | undefined | null) {\r\n        if (val === undefined || val === null) {\r\n            this.removeAttribute('at');\r\n        } else {\r\n            const asNum = Math.max(0, Math.min(100, parseInt(String(val))));\r\n            if (asNum) {\r\n                this.setAttribute('at', String(asNum));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n * The maximum number of milliseconds to wait before recalculating dimensions\r\n */\r\n    get ms(): number {\r\n        const fallback = 16; //at 60fps 16ms is roughly 1 frame\r\n        if (this.hasAttribute('at')) {\r\n            try {\r\n                return parseInt(String(this.getAttribute('at')));\r\n            } catch (e) {\r\n                return fallback;\r\n            }\r\n        }\r\n        return fallback;\r\n    }\r\n\r\n    /**\r\n     * The maximum number of milliseconds to wait before recalculating dimensions\r\n     */\r\n    set ms(val: string | number | undefined | null) {\r\n        if (!val) {\r\n            this.removeAttribute('ms');\r\n        } else {\r\n            const asNum = Math.max(0, parseInt(String(val)));\r\n            if (asNum) {\r\n                this.setAttribute('ms', String(asNum));\r\n            }\r\n        }\r\n    }\r\n\r\n    get divider() {\r\n        return this.getAttribute('divider') ?? this.#defaultDivider;\r\n    }\r\n\r\n    set divider(val) {\r\n        if (!val?.length) {\r\n            this.removeAttribute('divider');\r\n        } else {\r\n            this.setAttribute('divider', val);\r\n        }\r\n    }\r\n\r\n    get truncated() {\r\n        return this.#isTruncated;\r\n    }\r\n\r\n    #setTruncated(isTruncated: boolean) {\r\n        if (isTruncated === this.#isTruncated) return;\r\n        this.#isTruncated = isTruncated;\r\n        if (isTruncated && !this.hasAttribute('truncated')) {\r\n            this.setAttribute('truncated', '');\r\n        } else if (this.hasAttribute('truncated')) {\r\n            this.removeAttribute('truncated');\r\n        }\r\n    }\r\n\r\n    #redraw() {\r\n        //this is the latest update, it's the only one that should be applied.\r\n        if (this.#redrawLock) {\r\n            cancelAnimationFrame(this.#redrawLock);\r\n            this.#redrawLock = undefined;\r\n        }\r\n        const updateInnerText = (newText: string): boolean => {\r\n            if (this.innerText !== newText) {\r\n                this.innerText = newText ?? '';\r\n                return true;\r\n            };\r\n            return false;\r\n        };\r\n        const redraw = () => {\r\n            if (this && (!this.isConnected || this.hasAttribute('disabled'))) {\r\n                updateInnerText(this.title);\r\n            } else {\r\n                //there's no point rendering elements that aren't seen, so only continue while the element is in view\r\n                if (!this.#canUpdate) return;\r\n                const noTitle = !this.title || !this.#segments?.length;\r\n                this.#setTruncated(this.#dimensions.elLen < this.#dimensions.maxTextLen);\r\n                const useFullText = noTitle || !this.#dimensions.elLen || !this.truncated;\r\n                if (useFullText) {\r\n                    updateInnerText(this.title);\r\n                    return;\r\n                }\r\n                //if the text is too small to display  anything more than the divider\r\n                if (this.#dimensions.elLen <= this.#dimensions.dividerLen) {\r\n                    updateInnerText(this.divider);\r\n                    return;\r\n                }\r\n                const availableSpace = Math.floor(this.#dimensions.elLen - this.#dimensions.dividerLen);\r\n                const startMaxPx = Math.floor(availableSpace * (this.at / 100));\r\n                const endMaxPx = Math.floor(availableSpace - startMaxPx);\r\n                const startIdx = this.#segments.filter(({ length: segLen }, idx, arr) => {\r\n                    const sumLen = Math.ceil(arr.slice(0, idx).reduce((prev, curr) => prev + curr.length, 0) + segLen);\r\n                    return sumLen < startMaxPx;\r\n                }).length;\r\n                const endIdx = this.#segments.filter(({ length: segLen }, idx, arr) => {\r\n                    const sumLen = Math.ceil(arr.slice(-idx).reduce((prev, curr) => prev + curr.length, 0) + segLen);\r\n                    return sumLen > endMaxPx;\r\n                }).length;\r\n                const startStr = this.title.slice(0, startIdx);\r\n                const endStr = this.title.slice(endIdx);\r\n                updateInnerText(`${startStr}${this.divider}${endStr}`);\r\n            };\r\n        }\r\n        this.#redrawLock = requestAnimationFrame(redraw);\r\n    }\r\n\r\n    #render() {\r\n        if (!this) return;\r\n        //there's an update pending, let it finish\r\n        if (this.#dimensionUpdateLockId) return;\r\n        const updateDimensions = () => {\r\n            const currentText = this.innerText;\r\n            const { writingMode } = getComputedStyle(this);\r\n            const isVertical = writingMode.startsWith('vertical');\r\n\r\n            this.#defaultDivider = isVertical ? 'ï¸™' : 'â€¦'; //unicode FE19 and 2026\r\n            this.innerText = this.divider;\r\n            const { width: dividerWidth, height: dividerHeight } = this.getBoundingClientRect();\r\n            this.#dimensions.dividerLen = Math.ceil(isVertical ? dividerHeight : dividerWidth);\r\n\r\n            //determine the dimensions of the text by summing the length and width of each rendered segment\r\n            let fullTextLen = 0;\r\n            this.#segments.forEach((segData, idx) => {\r\n                this.innerText = segData.segment;\r\n                const { width, height } = this.getBoundingClientRect();\r\n                const dim = Math.ceil(isVertical ? height : width);\r\n                fullTextLen += dim;\r\n                this.#segments[idx].length = dim;\r\n            });\r\n            this.#dimensions.maxTextLen = fullTextLen;\r\n\r\n            this.innerText = this.title;\r\n            //determine the correct element dimensions to use for the next render\r\n            const { width: elWidth, height: elHeight } = this.getBoundingClientRect();\r\n            this.#dimensions.elLen = Math.floor(isVertical ? elHeight : elWidth);\r\n\r\n            //then restore the correct text\r\n            this.innerText = currentText;\r\n            // and remove the lock on updating dimensions\r\n            this.#dimensionUpdateLockId = undefined;\r\n        };\r\n        this.#dimensionUpdateLockId = requestIdleCallback(updateDimensions, { timeout: this.ms });\r\n    }\r\n}\r\n\r\ncustomElements.define('middle-truncate', MiddleTruncate);"],"names":["_elLen","_dividerLen","_maxTextLen","_onChange","DimensionProxy","onChange","initialValue","__privateAdd","elLen","dividerLen","maxTextLen","__privateSet","__privateGet","val","_segmenter","_segments","_dimensionUpdateLockId","_redrawLock","_isTruncated","_defaultDivider","_windowFocused","_resizeObserver","_dimensions","_MiddleTruncate_instances","canUpdate_get","cancelNextRender_fn","setTruncated_fn","redraw_fn","render_fn","MiddleTruncate","__privateMethod","_dimProxy","entries","contentBoxSize","inlineSize","attrName","_oldVal","newVal","segData","idx","_a","asNum","rect","bufferPx","isTruncated","updateInnerText","newText","noTitle","availableSpace","startMaxPx","endMaxPx","startIdx","segLen","arr","prev","curr","endIdx","startStr","endStr","updateDimensions","currentText","writingMode","isVertical","dividerWidth","dividerHeight","fullTextLen","width","height","dim","elWidth","elHeight"],"mappings":"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"}