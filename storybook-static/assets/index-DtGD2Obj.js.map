{"version":3,"file":"index-DtGD2Obj.js","sources":["../../packages/middle-truncate/index.ts"],"sourcesContent":["class MiddleTruncate extends HTMLElement {\r\n\r\n    static get observedAttributes() {\r\n        return ['value', 'limit'];\r\n    }\r\n\r\n    attributeChangedCallback(name) {\r\n        if (name === 'value' || name === 'limit') {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        const text = this.getAttribute('value') || '';\r\n        const limitAttr = this.getAttribute('limit');\r\n        const attrLimit = limitAttr ? parseInt(limitAttr, 10) : text.length;\r\n\r\n        const { fontSize, width } = window.getComputedStyle(this);\r\n        const chWidth = parseFloat(fontSize) / 2; //the width of a single character\r\n        const elWidthCh = parseFloat(width) / chWidth; // the width of the element in characters\r\n        const maxWidth = Math.min(attrLimit, elWidthCh);\r\n\r\n        const isRTL = this.dir === 'rtl';\r\n        const halfLength = Math.floor(maxWidth / 2);\r\n        const secondHalf = text.substring(text.length - halfLength);\r\n\r\n\r\n        this.innerHTML = `\r\n        <style>\r\n        .middle-truncate > * {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            max-width: ${halfLength}ch;\r\n            vertical-align: bottom;\r\n        }\r\n        .middle-truncate .${isRTL ? 'end' : 'start'}{\r\n            overflow: clip;\r\n            text-overflow: ellipsis;\r\n            }\r\n            .middle-truncate .${isRTL ? 'start' : 'end'}{\r\n                overflow: hidden;\r\n                margin-left: -0.5ch;\r\n            }\r\n            </style>\r\n      <span class=\"middle-truncate\" title=\"${text}\">\r\n        <span class=\"start\">${isRTL ? secondHalf : text}</span>\r\n        <span class=\"end\" aria-hidden=\"true\">${isRTL ? text : secondHalf}</span>\r\n      </span>\r\n    `;\r\n    }\r\n}\r\n\r\ncustomElements.define('middle-truncate', MiddleTruncate);"],"names":["MiddleTruncate","name","text","limitAttr","attrLimit","fontSize","width","chWidth","elWidthCh","maxWidth","isRTL","halfLength","secondHalf"],"mappings":"AAAA,MAAMA,UAAuB,WAAY,CAErC,WAAW,oBAAqB,CACrB,MAAA,CAAC,QAAS,OAAO,CAAA,CAG5B,yBAAyBC,EAAM,EACvBA,IAAS,SAAWA,IAAS,UAC7B,KAAK,OAAO,CAChB,CAGJ,mBAAoB,CAChB,KAAK,OAAO,CAAA,CAGhB,QAAS,CACL,MAAMC,EAAO,KAAK,aAAa,OAAO,GAAK,GACrCC,EAAY,KAAK,aAAa,OAAO,EACrCC,EAAYD,EAAY,SAASA,EAAW,EAAE,EAAID,EAAK,OAEvD,CAAE,SAAAG,EAAU,MAAAC,CAAA,EAAU,OAAO,iBAAiB,IAAI,EAClDC,EAAU,WAAWF,CAAQ,EAAI,EACjCG,EAAY,WAAWF,CAAK,EAAIC,EAChCE,EAAW,KAAK,IAAIL,EAAWI,CAAS,EAExCE,EAAQ,KAAK,MAAQ,MACrBC,EAAa,KAAK,MAAMF,EAAW,CAAC,EACpCG,EAAaV,EAAK,UAAUA,EAAK,OAASS,CAAU,EAG1D,KAAK,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,yBAKAA,CAAU;AAAA;AAAA;AAAA,4BAGPD,EAAQ,MAAQ,OAAO;AAAA;AAAA;AAAA;AAAA,gCAInBA,EAAQ,QAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,6CAKVR,CAAI;AAAA,8BACnBQ,EAAQE,EAAaV,CAAI;AAAA,+CACRQ,EAAQR,EAAOU,CAAU;AAAA;AAAA,KAAA,CAIxE,CAEA,eAAe,OAAO,kBAAmBZ,CAAc"}