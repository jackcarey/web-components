{"version":3,"file":"index-EVYRcu8r.js","sources":["../../packages/mutative/index.ts"],"sourcesContent":["/**\n * @module\n * This module contains a utility to constantly monitor specific CSS selectors for changes\n *\n * @example\n * ```javascript\n * Mutative.observe(\"p\", (record) => console.log(record));\n * ```\n */\n\n/**\n * Control CSS selector mutation observers.\n */\nexport default class Mutative {\n    static #isObserving = false;\n    static #observerList: Record<string, Function> = {};\n    static #mutationFn = (mutationList: MutationRecord[]): void => {\n        if (Mutative.#isObserving) {\n            Object.entries(Mutative.#observerList).forEach(([selector, callback]) => {\n                mutationList.forEach((mutationRecord: MutationRecord) => {\n                    // call the callback function on every change, no matter its type\n                    [\n                        ...Array.from(mutationRecord?.addedNodes),\n                        ...Array.from(mutationRecord?.removedNodes),\n                        mutationRecord?.target,\n                    ].forEach((el: Node) => {\n                        if (el instanceof Element && el.matches(selector)) {\n                            callback(mutationRecord);\n                        }\n                    });\n                });\n            });\n        }\n    };\n    static #bodyObserver = new MutationObserver(Mutative.#mutationFn);\n    static #addSelectorObj(newObj): void {\n        // const obj = Object.create(mutative.#observerList);\n        // mutative.#observerList = { ...obj, ...newObj };\n        Object.assign(Mutative.#observerList, newObj);\n    }\n    static #addSelectorFnPair(name, fn): void {\n        const obj = {};\n        obj[name] = fn;\n        Mutative.#addSelectorObj(obj);\n    }\n    /**\n     * Observe at least 1 CSS selector for changes\n     */\n    static observe(selectors?: string | string[], callback?: Function): void {\n        if (!Mutative.#isObserving) {\n            Mutative.#isObserving = true;\n            Mutative.#bodyObserver.observe(document.body, {\n                attributes: true,\n                subtree: true,\n                childList: true,\n                characterData: true,\n                attributeOldValue: true,\n                characterDataOldValue: true,\n            });\n        }\n        if (selectors) {\n            const isString = typeof selectors === \"string\";\n            const isArray = Array.isArray(selectors);\n            if (!isString && !isArray && !(typeof selectors === \"object\")) {\n                throw new Error(\"selectorDict must be string, array, or object\");\n            }\n            if (isString || isArray) {\n                if (typeof callback !== \"function\") {\n                    throw new Error(\"callback must be a function\");\n                }\n                if (isArray) {\n                    selectors.forEach((name) => {\n                        Mutative.#addSelectorFnPair(name, callback);\n                    });\n                } else {\n                    Mutative.#addSelectorFnPair(selectors, callback);\n                }\n            } else {\n                if (\n                    Object.entries(selectors).some(\n                        ([key, fn]) => typeof key !== \"string\" || typeof fn !== \"function\"\n                    )\n                ) {\n                    throw new Error(\"Must be string-function pairs\");\n                }\n                Mutative.#addSelectorObj(selectors);\n            }\n        }\n    }\n    /**\n     * stop observing at least 1 CSS selector for changes\n     */\n    static disconnect(...selectors: string[]): void {\n        //finish mutation callbacks before removing selectors\n        Mutative.#mutationFn(Mutative.#bodyObserver.takeRecords());\n        if (selectors) {\n            let items = [];\n            //allow many types of selectors to be passed to this function\n            const addItems = (selectorQueries) => {\n                selectorQueries.forEach((s) => {\n                    if (s) {\n                        if (Array.isArray(s)) {\n                            s.forEach((i) => addItems(i));\n                        } else if (typeof s === \"string\") {\n                            items.push(s);\n                        } else {\n                            addItems(Object.keys(s));\n                        }\n                    }\n                });\n            };\n            addItems(selectors);\n            //only try to remove items that are actually part of the observer list\n            const observerKeys = Object.keys(Object.create(Mutative.#observerList));\n            items\n                .filter((k) => observerKeys.includes(k))\n                .forEach((k) => {\n                    delete Mutative.#observerList[k];\n                });\n        }\n        //if there are no selectors left or this is a full pause, stop observing anything at all\n        if (!selectors?.length || !Object.keys(Mutative.#observerList)?.length) {\n            Mutative.#isObserving = false;\n            Mutative.#bodyObserver.disconnect();\n        }\n    }\n\n    /**\n     * Takes and returns a list of mutation records from the body observer.\n     *\n     * This method retrieves all the mutation records that have been queued up \n     * by the body observer and returns them as an array. The record queue is emptied in the process.\n     *\n     * @returns {MutationRecord[]} An array of MutationRecord objects.\n     */\n    static takeRecords(): MutationRecord[] {\n        return Array.from(Mutative.#bodyObserver.takeRecords());\n    }\n\n    /**\n     * Indicates whether the Mutative class is currently observing changes.\n     * \n     * @returns {Boolean} True if observing, false otherwise.\n     */\n    static get isObserving(): Boolean {\n        return Mutative.#isObserving;\n    }\n}"],"names":["_isObserving","_observerList","_mutationFn","_bodyObserver","_Mutative_static","addSelectorObj_fn","addSelectorFnPair_fn","_Mutative","selectors","callback","_a","_b","__privateGet","__privateSet","isString","isArray","name","__privateMethod","key","fn","items","addItems","selectorQueries","s","i","observerKeys","k","newObj","obj","__privateAdd","mutationList","selector","mutationRecord","el","Mutative"],"mappings":"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"}